import uuid
from flask import Flask, request
from db import items, stores
from flask_smorest import abort

app = Flask(__name__)

#STORES ####################################
@app.post("/store")
def create_store():
    store_data = request.get_json()
    if "name" not in store_data:
        abort(400, message="Bad request. Ensure name is included in the JSON payload.")
    
    for store in stores.values():
        if store_data["name"] == store["name"]:
            abort(400, message="Store already exists.")
            
    id = uuid.uuid4().hex
    new_store = {**store_data, "id": id}
    stores[id] = new_store

    return new_store, 201

@app.get("/store/<string:id>")
def get_store(id):
    try:
        return stores[id]
    except KeyError:
        abort(404, message=f"Store {id} not found.")

@app.get("/store")
def get_stores():
    return {"stores": list(stores.values())}

@app.put("/store/<string:id>")
def update_store(id):
    store_data = request.get_json()
    if "name" not in store_data:
        abort(400, message=f"Bad request. Ensure name is included in the JSON payload.")
    
    try:        
        store = stores[id]
        store |= store_data   # |= is Dictionary update operator.
                            #  Changes contents of dictionary entry
        return {"message": "Store updated."}
    except KeyError:
        abort(404, message=f"Store {id} not found.")

@app.delete("/store/<string:id>")
def delete_store(id):
    try:
        del stores[id]
        return {"message": "Store deleted."}
    except KeyError:
        abort(404, message=f"Store {id} not found.")

#ITEMS ####################################
@app.post("/store/item")
def create_item():
    item_data = request.get_json()
    if ("price" not in item_data or
        "store_id" not in item_data or
            "name" not in item_data):
        abort(400, message="Bad request. Ensure price, name and store_id are included in the JSON payload.")

    for item in items.values():
        if (item_data["name"] == item["name"]
            and item_data["store_id"] == item["store_id"]
            ):
            abort(400, message="Item already exists.")

    if item_data["store_id"] not in stores:
        abort(404, message=f"Store {item_data['store_id']} not found.")
        
    id = uuid.uuid4().hex
    item = {**item_data, "id": id}
    items[id] = item
    return item, 201

@app.get("/item/<string:id>")
def get_item(id):
    try:
        return items[id]    
    except KeyError:
        abort(404, message=f"Item {id} not found.")

@app.get("/item")
def get_all_items():    
    return {"items": list(items.values())}


@app.put("/item/<string:id>")
def update_item(id):
    item_data = request.get_json()
    if "price" not in item_data or "name" not in item_data:
        abort(400, message=f"Bad request. Ensure price, name are included in the JSON payload.")
    
    try:        
        item = items[id]
        item |= item_data   # |= is Dictionary update operator.
                            #  Changes contents of dictionary entry
        return {"message": "Item updated."}
    except KeyError:
        abort(404, message=f"Item {id} not found.")
        
@app.delete("/item/<string:id>")
def delete_item(id):
    try:
        del items[id]
        return {"message": "Item deleted."}
    except KeyError:
        abort(404, message=f"Item {id} not found.")
